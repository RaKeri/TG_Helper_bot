import asyncio
import ctypes
import datetime
import glob
import multiprocessing
import os
import random
import re
import sys
import time
import json
from collections import Counter
from logging.handlers import TimedRotatingFileHandler
from multiprocessing import Process
from sqlite3 import OperationalError
import logging

import phonenumbers
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ChatMemberStatus
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InputMediaPhoto, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from telethon import TelegramClient, errors

from clientWork.telethonWorker import startGrab
from tools.checkActivate import check_license, get_device_id, checkUpdate
from tools.createQR import generate_qr_code
from tools.fsm import Grab, Auth
from tools.keyboard import profile_keyboard, start_keyboard, generate_how_to_use_keyboard, answers_keyboard, \
    all_accounts_keyboard, check_logs_keyboard, check_parsing_keyboard, start_add_account_keyboard
from tools.uuidGen import UUID
from tools.checkProxy import ProxyChecker
from tools.posecc import check_string, is_digits
import flag

from db.database import DatabaseManager
from dotenv import load_dotenv
load_dotenv()

pathdir = os.path.dirname(os.path.abspath(__file__)) + "\\"

bot = Bot(token=os.getenv("BOT_TOKEN"), parse_mode="HTML")


api_id = 21628682
api_hash = "26c7cd0800b6449c4f9bbd29d1c81f7b"
Client_verison = "0.0.1"

dp = Dispatcher()
uuid_generator = UUID()
db = DatabaseManager()

"""–ó–∞–ø—É—Å–∫–∞–º–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""


log_dir = "logs"
os.makedirs(log_dir, exist_ok=True)

FILE_ATTRIBUTE_HIDDEN = 0x02
ctypes.windll.kernel32.SetFileAttributesW(log_dir, FILE_ATTRIBUTE_HIDDEN)

# –õ–æ–≥–≥–µ—Ä
logger = logging.getLogger("my_logger")
logger.setLevel(logging.DEBUG)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
all_time_handler = logging.FileHandler(os.path.join(log_dir, "all_time.log"), encoding="UTF-8")
all_time_handler.setLevel(logging.DEBUG)
all_time_format = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
all_time_handler.setFormatter(all_time_format)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
daily_handler = TimedRotatingFileHandler(
    os.path.join(log_dir, "daily.log"),
    encoding="UTF-8",
    when="midnight",  # –°–º–µ–Ω–∞ —Ñ–∞–π–ª–∞ –≤ –ø–æ–ª–Ω–æ—á—å
    interval=1,
    backupCount=30  # –•—Ä–∞–Ω–∏–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
)
daily_handler.setLevel(logging.DEBUG)
daily_format = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
daily_handler.setFormatter(daily_format)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
logger.addHandler(all_time_handler)
logger.addHandler(daily_handler)



"""---------------------------------------------------------"""


@dp.my_chat_member()
async def chat_member(message: types.Message):
    user_id = message.from_user.id
    if (message.old_chat_member.status == ChatMemberStatus.KICKED and
        message.new_chat_member.status == ChatMemberStatus.MEMBER):
        db.update_user_status(user_id, 0)
    elif (message.new_chat_member.status == ChatMemberStatus.KICKED and
          message.old_chat_member.status == ChatMemberStatus.MEMBER):
        db.update_user_status(user_id, 1)

@dp.callback_query(F.data.split("_")[0] == "dont")
async def dont(callback: types.CallbackQuery):
    await callback.answer("–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", show_alert=True)
    pass


@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):

    user = db.fetch_user(message.from_user.id)

    if user is None:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_user((message.from_user.id, message.from_user.username, message.from_user.first_name, message.from_user.last_name,
            time.time(), 0, 0, 0))

        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ {message.from_user.first_name} –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ.",
            reply_markup=start_keyboard())
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}",
                             reply_markup=start_keyboard())


def get_active_processes():
    active = multiprocessing.active_children()
    if active:
        header = "\n\n<b>–í —Ä–∞–±–æ—Ç–µ</b>:\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì"
        footer = "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
        process_list = "\n".join("‚Ä¢ " + str(p.name) for p in active)
        return f"{header}\n{process_list}\n{footer}"
    else:
        return ""



@dp.callback_query(F.data == "profile")
async def profile(callback: types.CallbackQuery):
    await callback.answer()
    user = db.fetch_user(callback.from_user.id)
    device_id = get_device_id()
    lic = check_license(device_id)
    data = datetime.datetime.fromtimestamp(int(lic))
    await callback.message.edit_text(f'''ü§ñ –ü—Ä–æ—Ñ–∏–ª—å
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üÜî <b>ID</b>: <code>{user[0]}</code>
üî¢ <b>–ê–∫–∫–∞—É–Ω—Ç–æ–≤</b>: <code>{user[5]}</code>
üìÜ <b>–õ–∏—Ü–µ–Ω–∑–∏—è –¥–æ</b>: <code>{data.date()}</code>{get_active_processes()}
''', reply_markup=profile_keyboard())




@dp.callback_query(F.data.split("_")[0] == "answers")
async def answers(callback: types.CallbackQuery):


    try:
        await callback.message.edit_text("–í–æ–ø—Ä–æ—Å -- –æ—Ç–≤–µ—Ç:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=answers_keyboard())
    except Exception as e:

        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer("–í–æ–ø—Ä–æ—Å -- –æ—Ç–≤–µ—Ç:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=answers_keyboard())

@dp.callback_query(F.data.split("_")[0] == "howToUse")
async def how_to_use(callback: types.CallbackQuery):
    step = int(callback.data.split("_")[1])

    photos = [
        # ("AgACAgIAAxkBAANcZaQCJVK41uVSMR2Wa4aEudiV2a8AAkrTMRuAmiBJ0hWrCmcm_0MBAAMCAAN4AAM0BA",
        #  "<b>1.</b> –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ <b>–ø—Ä–æ–±–Ω–∞—è</b> –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <i><u>2 —á–∞—Å–∞</u></i> –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ–µ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>\"–ü–û–î–ü–ò–°–ö–ê -> FREE\"</b>"),

        ("AgACAgIAAxkBAANdZaQCKdK5Jw3RqWoT7tIeEEh7LOkAAkvTMRuAmiBJ1LABt0H295kBAAMCAAN4AAM0BA",
         "<b>1.</b> –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç–µ –≤–µ—Å—Ç–∏ –∫–∞–Ω–∞–ª—ã, –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 5 –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"),

        ("AgACAgIAAxkBAANeZaQCLmd9hbjto-HdfrQiTUgquGIAAkzTMRuAmiBJowYBmVR9MIUBAAMCAAN4AAM0BA",
         "<b>2.</b> –í –∏—Ç–æ–≥–µ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º."),

        ("AgACAgIAAxkBAANfZaQCNUiKyYY3a9fMv8TTfeTIpisAAk3TMRuAmiBJZwQyWQABqS-aAQADAgADeAADNAQ",
         "<b>3.</b> –í –ü—É–Ω–∫—Ç–µ 1 –∏ 3 –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∞ —Ç–∞–∫–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á.")
    ]

    keyboard = generate_how_to_use_keyboard(step)

    if step == 0:
        try:
            await callback.message.delete()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await callback.message.answer_photo(
            photo=photos[step][0],
            caption=photos[step][1],
            reply_markup=keyboard
        )
    else:
        media = InputMediaPhoto(media=photos[step][0], caption=photos[step][1])
        await callback.message.edit_media(media=media, reply_markup=keyboard)




@dp.callback_query(F.data.split("_")[0] == "account")
async def acc6(callback: types.callback_query, id = None):
    accs = db.fetch_accounts(callback.from_user.id)

    try:
        await callback.message.edit_text("–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=all_accounts_keyboard(accs))
    except Exception as e:
        if id:
            await bot.edit_message_text(message_id=id, chat_id=callback.from_user.id, text="–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=all_accounts_keyboard(accs))
        else:
            await callback.answer("–í–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ", reply_markup=all_accounts_keyboard(accs))


@dp.callback_query(F.data.split("_")[0] == "quit")
async def quit(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()

    ccs = db.accounts_from_phone(callback.data.split('_')[1])
    client = TelegramClient(f"{callback.data.split('_')[1]}.session", api_id, api_hash, device_model=ccs[13],
                            system_version=ccs[14], app_version=ccs[15])
    await client.connect()
    await client.log_out()
    await client.disconnect()
    db.del_to_db_account(callback.data.split('_')[1], callback.from_user.id)
    await callback.message.edit_text("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ‚Äî –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")


@dp.callback_query(F.data.split("_")[0] == "Chaccount")
async def acc5(callback: types.CallbackQuery, state: FSMContext):

    a = db.accounts_from_phone(callback.data.split('_')[1])
    procCur = False
    for p in multiprocessing.active_children():
        if p.name == callback.data.split("_")[1]:
            procCur = True
            break
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="1", callback_data="ActionAccount_1_" + callback.data.split("_")[1]))
    builder.add(InlineKeyboardButton(text="2", callback_data="ActionAccount_2_" + callback.data.split("_")[1]))
    builder.add(InlineKeyboardButton(text="3", callback_data="ActionAccount_3_" + callback.data.split("_")[1]))
    builder.add(InlineKeyboardButton(text="4", callback_data="ActionAccount_4_" + callback.data.split("_")[1]))
    builder.add(InlineKeyboardButton(text="5", callback_data="dont_" + callback.data.split("_")[1]))
    builder.row(InlineKeyboardButton(text=("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏" if a[12] == None else "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–∫—Å–∏"),
                                     callback_data="addProxy_" + callback.data.split("_")[1]),
                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="quit_" + callback.data.split("_")[1]))
    builder.row(InlineKeyboardButton(text=f"–°—Ç–∞—Ç—É—Å ({'üü¢' if procCur == 'ACTIVE' else 'üî¥'})",
                                     callback_data="changeStatus_" + callback.data.split("_")[1] + "_" + (
                                         "DISABLE" if procCur == 'ACTIVE' else "ACTIVE")))
    # builder.row(InlineKeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏", callback_data="downloadFileSession_" + callback.data.split("_")[1]))
    builder.row(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="account"))
    await state.update_data(chooseActionFrom=[])
    await state.update_data(chooseActionTo=[])
    await state.update_data(phone=callback.data.split("_")[1])

    await callback.message.edit_text(
        f"–ê–∫–∫–∞—É–Ω—Ç (<i>{callback.data.split('_')[1]}</i>|<b>@{a[2]}</b>)\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüÜï1. –ü–µ—Ä–µ—Å—ã–ª–∞—Ç—å <i><b>–Ω–æ–≤—ã–µ</b></i> –ø–æ—Å—Ç—ã\nüíæ2. –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüì§3. –ü–µ—Ä–µ—Å–ª–∞—Ç—å <i><b>—Å—Ç–∞—Ä—ã–µ</b></i> —Å–æ–æ–±—â–µ–Ω–∏—è\nüì§4. –°–∫–∞—á–∞—Ç—å –≤—Å–µ <i><b>–º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π</b></i> —Å–æ–æ–±—â–µ–Ω–∏—è\nü§ñ<tg-spoiler>5. –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é –ò–ò (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)</tg-spoiler>",
        reply_markup=builder.as_markup())

@dp.callback_query(F.data.split("_")[0] == "downloadFileSession")
async def downloadFileSession(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–û–∂–∏–¥–∞–π—Ç–µ")
    session = FSInputFile(callback.data.split("_")[1] +".session")
    await callback.message.answer_document(
        session
    )

@dp.callback_query(F.data.split("_")[0] == "addProxy")
async def addProxy(callback: types.CallbackQuery, state: FSMContext):

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="Chaccount_" + callback.data.split("_")[1]))
    s = await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<pre><code style=\"language-python\">http;127.0.0.1;5555;LOGIN;PASSWORD</code></pre>–∏–ª–∏\n<pre><code style=\"language-python\">http;127.0.0.1;5555</code></pre>\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: (http)",
         reply_markup=builder.as_markup())
    await state.update_data(messageId=s.message_id)
    await state.set_state(Grab.enter_Proxy)


@dp.message(Grab.enter_Proxy)
async def checkProxy(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not "phone" in data:
        await acc6(message, data["messageId"])
        return
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="Chaccount_" + data["phone"]))
    if check_string(message.text.lower()):
        checker = ProxyChecker()
        s = await checker.check_proxy(message.text.lower())
        if not s:
            await message.answer("–í–≤–µ–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ",
                                 reply_markup=builder.as_markup())
            return

        await state.clearState()
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        try:
            await bot.delete_message(chat_id=message.from_user.id, message_id=data["messageId"])
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await message.answer(s,  reply_markup=builder.as_markup())
        await state.clearState()
        db.update_proxy(message.text.lower(), data["phone"])
        return
    else:
        await message.answer("–ü—Ä–æ–∫—Å–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=builder.as_markup())



def find_files(directory, id, phone):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .csv –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    files = glob.glob(os.path.join(directory, '*.csv'))

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã, –∏–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ID
    files = [f for f in files if os.path.basename(f).split("_")[0] == str(id) and os.path.basename(f).split("_")[1] == phone.replace("+", "")]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∫ —Å–∞–º–æ–º—É —Å—Ç–∞—Ä–æ–º—É)
    files.sort(key=os.path.getctime, reverse=True)

    return files


@dp.callback_query(F.data.split("_")[0] == "checkParsing")
async def checkParsing(callback: types.CallbackQuery, state: FSMContext):
    files = find_files(pathdir + "parseData", callback.from_user.id, callback.data.split("_")[1])


    await callback.message.edit_text(
        "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–∂–Ω–æ –Ω–∏–∂–µ\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n",
         reply_markup=check_parsing_keyboard(callback, files))


@dp.callback_query(F.data.split("_")[0] == "downloadPars")
async def downloadPars(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    document = types.FSInputFile(
        pathdir.replace("/", "\\") + "parseData\\" + callback.data.split("_")[2] + "_" + callback.data.split("_")[
            3] + "_" + callback.data.split("_")[4] + ".csv")
    await bot.send_document(callback.from_user.id, document=document)
    await checkParsing(callback, state)


@dp.callback_query(F.data.split("_")[0] == "changeStatus")
async def changeStatus(callback: types.CallbackQuery, state: FSMContext):
    db.update_account_status(callback.data.split("_")[2], (time.time() if callback.data.split("_")[2] == "ACTIVE" else None), callback.data.split("_")[1])
    phone = callback.data.split("_")[1]
    if not any(p.name == str(phone) for p in multiprocessing.active_children()):
        p = Process(target=startGrab, args=(phone,), name=str(phone))
        p.start()
        await callback.answer(f"–ó–∞–ø—É—â–µ–Ω –∞–∫–∫–∞—É–Ω—Ç {p.name}", show_alert=True)
    else:
        for p in multiprocessing.active_children():
            if p.name == phone:
                p.terminate()
                await callback.answer(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç {p.name}", show_alert=True)
                break
    await acc5(callback, state)


@dp.callback_query(F.data.split("_")[0] == "ActionAccount")
async def acc4(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="Chaccount_" + callback.data.split('_')[2]))
    data = await state.get_data()
    if not "chooseActionFrom" in data:
        await state.update_data(chooseActionFrom=[])
        await state.update_data(chooseActionTo=[])

    try:

        ccs = db.accounts_from_phone(callback.data.split('_')[2])

        client = TelegramClient(f"{callback.data.split('_')[2]}.session", api_id, api_hash, device_model=ccs[13],
                                system_version=ccs[14], app_version=ccs[15])
        await client.connect()
    except OperationalError as e:
        if e.sqlite_errorname == "SQLITE_BUSY":
            await callback.answer("–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚Äî üî¥", show_alert=True)
        return
    s = ""
    chats = []
    flag = True
    i = 0
    async for chat in client.iter_dialogs(archived=False):
        if int(callback.data.split("_")[1]) == 2:
            if chat.is_group:
                chats.append(chat)
                if flag:
                    s += str(i) + ". " + chat.title + "\n"
                    flag = False
                else:
                    s += "<b>" + str(i) + ". " + chat.title + "</b>\n"
                    flag = True
                i += 1
        else:
            chats.append(chat)
            if flag:
                s += str(i) + ". " + chat.title + "\n"
                flag = False
            else:
                s += "<b>" + str(i) + ". " + chat.title + "</b>\n"
                flag = True
            i += 1
    await client.disconnect()
    await state.update_data(chats=chats)
    await state.update_data(phone=callback.data.split("_")[2])
    await state.update_data(action=callback.data.split("_")[1])
    await state.set_state(Grab.enter_id)
    if int(callback.data.split("_")[1]) in range(2, 5):
        ms = await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª/—á–∞—Ç/–≥—Ä—É–ø–ø—É, –≤–≤–µ–¥–∏—Ç–µ ID\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n" + s,
             reply_markup=builder.as_markup())
    else:
        ms = await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ <b>–ò–ó</b> –∫–∞–∫–æ(–≥–æ|–∏—Ö) –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞/–≥—Ä—É–ø–ø—ã, –≤–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø—Ä–∏–º–µ—Ä (1 3 10 101)\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n" + s,
             reply_markup=builder.as_markup())
    await state.update_data(messageId=ms.message_id)


@dp.message(Grab.enter_id)
async def acc3(message: types.Message, state: FSMContext):
    match = re.match(r"^(\d+ ?)*$", message.text)
    data = await state.get_data()
    chats = data["chats"]

    if match:
        ids = [int(x) for x in message.text.split()]

        invalid = []
        for x in ids:
            if x < 0 or x > len(chats):
                invalid.append(x)

        if invalid:
            await message.answer(f"–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å ID: {invalid}")
            return
    else:
        await message.answer("–¢—ã –≤–≤–µ–ª ID –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        return
    await state.clearState()
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    ss = data["chooseActionFrom"]
    ss.append(message.text)

    if int(data["action"]) == 2 or int(data["action"]) == 4:
        s = ""
        flag = True
        i = 1
        ids = [int(x) for x in message.text.split()]

        for id in ids:
            if flag:
                s += str(i) + ". " + chats[id].title + "\n"
                flag = False
            else:
                s += "<b>" + str(i) + ". " + chats[id].title + "</b>\n"
                flag = True
            i += 1
        builder = InlineKeyboardBuilder()
        builder.row(types.InlineKeyboardButton(text="üí®–ù–∞—á–∞—Ç—å", callback_data="start"))
        builder.row(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="Chaccount_" + data["phone"]))
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["messageId"], text="‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n" + s + "\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ",
                             reply_markup=builder.as_markup())
        return

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="Chaccount_" + data["phone"]))
    s = ""
    flag = True
    i = 0
    for chat in chats:
        if flag:
            s += str(i) + ". " + chat.title + "\n"
            flag = False
        else:
            s += "<b>" + str(i) + ". " + chat.title + "</b>\n"
            flag = True
        i += 1

    await state.update_data(chooseActionFrom=ss)
    await state.clearState()
    await state.set_state(Grab.enter_idTO)
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["messageId"], text=
        "–í—ã–±–µ—Ä–∏—Ç–µ <b>–í</b> –∫–∞–∫(–æ–π|–∏–µ) –∫–∞–Ω–∞–ª/—á–∞—Ç/–≥—Ä—É–ø–ø—É, –≤–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø—Ä–∏–º–µ—Ä (1 3 10 101)\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n" + s,
         reply_markup=builder.as_markup())


@dp.message(Grab.enter_idTO)
async def acc2(message: types.Message, state: FSMContext):
    match = re.match(r"^(\d+ ?)*$", message.text)
    data = await state.get_data()
    chats = data["chats"]
    if match:
        ids = [int(x) for x in message.text.split()]

        invalid = []
        for x in ids:
            if x < 0 or x > len(chats):
                invalid.append(x)

        if invalid:
            await message.answer(f"–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å ID: {invalid}")
            return
    else:
        await message.answer("–¢—ã –≤–≤–µ–ª ID –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        return
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    await state.clearState()
    if not "filters" in data:
        await state.update_data(filters=[])
        data = await state.get_data()
    filter = data["filters"]
    if len(filter) != len(data["chooseActionFrom"]):
        filter.append({
            "delURL": False,
            "delAllURL": False,
            "delTEXT": False,
            "translate": False,
            "addSourceChannel": False,
            "translateLang": "",
            "tag": "",
            "filters": [],
            "goodKeys": [],
            "badKeys": [],
            "transcribation": False
        })
        await state.update_data(filters=filter)
    ss = data["chooseActionTo"]
    ss.append(message.text)
    await state.update_data(chooseActionTo=ss)
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(text="üí®–ù–∞—á–∞—Ç—å", callback_data="start"))
    builder.row(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã",
                                           callback_data="AddFilter_" + data["action"] + "_" + data["phone"]))
    if not int(data["action"]) == 3:
        builder.row(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
                                               callback_data="ActionAccount_" + data["action"] + "_" + data["phone"]))
    builder.row(types.InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data="Chaccount_" + data["phone"]))
    s = ""
    for ij in range(0, len(data["chooseActionFrom"])):

        sFrom = ""
        sTo = ""

        flag = True
        i = 1
        ids = [int(x) for x in data["chooseActionFrom"][ij].split()]

        for id in ids:
            if flag:
                sFrom += str(i) + ". " + chats[id].title + "\n"
                flag = False
            else:
                sFrom += "<b>" + str(i) + ". " + chats[id].title + "</b>\n"
                flag = True
            i += 1
        flag = True
        i = 1
        ids = [int(x) for x in data["chooseActionTo"][ij].split()]
        for id in ids:
            if flag:
                sTo += str(i) + ". " + chats[id].title + "\n"
                flag = False
            else:
                sTo += "<b>" + str(i) + ". " + chats[id].title + "</b>\n"
                flag = True
            i += 1
        s += "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" + str(
            ij + 1) + " –ó–∞–¥–∞—á–∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞(–æ–≤): \n" + sFrom + "\n–í —á–∞—Ç(—ã):\n" + sTo + "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n\n"

    await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["messageId"], text=s,  reply_markup=builder.as_markup())


@dp.callback_query(F.data.split("_")[0] == "AddFilter")
async def acc1(callback: types.CallbackQuery, state: FSMContext):


    builder = InlineKeyboardBuilder()
    data = await state.get_data()
    if not "action" in data:
        await acc6(callback)
        return
    if not "filters" in data:
        await state.update_data(filters=[])
        data = await state.get_data()
    filter = data["filters"]

    if len(filter) != len(data["chooseActionFrom"]):
        filter.append({
            "delURL": False,
            "delAllURL": False,
            "delTEXT": False,
            "translate": False,
            "addSourceChannel": False,
            "translateLang": "",
            "tag": "",
            "filters": [],
            "goodKeys": [],
            "badKeys": [],
            "transcribation": False
        })
        await state.update_data(filters=filter)
    try:

        if callback.data.split("_")[1] is not None and callback.data.split("_")[1] != str(1) and \
                callback.data.split("_")[1] != str(2) and callback.data.split("_")[1] != str(3):
            filter_name = callback.data.split("_")[1]
            filter = data["filters"]
            filter[len(data["chooseActionFrom"]) - 1][filter_name] = not bool(
                data["filters"][(len(data["chooseActionFrom"]) - 1)][filter_name])
            if bool(filter[len(data["chooseActionFrom"]) - 1][filter_name]):
                match callback.data.split("_")[1]:
                    case "delURL":
                        await callback.answer(
                            "–°—Å—ã–ª–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—á–µ–Ω—ã —É –Ω–∞—Å –∫–∞–∫ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∏–ª–∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—Å—è –∏–∑ –ø–æ—Å—Ç–∞.",
                            show_alert=True)
                    case "delAllURL":
                        await callback.answer("–í—Å–µ —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—Å—è –∏–∑ –ø–æ—Å—Ç–∞.", show_alert=True)
                    case "delText":
                        await callback.answer("–í–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.", show_alert=True)
                    case "transcribation":
                        await callback.answer("–í–º–µ—Å—Ç–µ —Å –ì–° –∏ –∫—Ä—É–∂–∫–∞–º–∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞.",
                                              show_alert=True)
                    case "addSourceChannel":
                        await callback.answer("–î–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω–µ—Ü –ø–æ—Å—Ç–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –ò–°–•–û–î–ù–´–ô –∫–∞–Ω–∞–ª –ø–æ—Å—Ç–∞.",
                                               show_alert=True)
            await state.update_data(filters=filter)

    except Exception as e:
        pass

    data = await state.get_data()

    filter_options = [
        ("delURL", "üóë –†–µ–∫–ª. —Å—Å—ã–ª–∫–∏"),
        ("delAllURL", "üóë –í—Å–µ —Å—Å—ã–ª–∫–∏"),
        ("delTEXT", "üóë –¢–µ–∫—Å—Ç"),
        #("transcribation", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"),
        ("addSourceChannel", "–î–æ–±. –Ω–∞–∑–≤. –∏—Å—Ö. –∫–∞–Ω–∞–ª–∞")
    ]

    for option in filter_options:
        filter_name, filter_text = option

        selected = "‚úÖ" if data["filters"][(len(data["chooseActionFrom"]) - 1)][filter_name] else "‚ùå"
        button_text = f"{selected} {filter_text}"
        callback_data = f"AddFilter_{filter_name}"

        builder.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    builder.adjust(2)

    selected = "‚úÖ" if data["filters"][(len(data["chooseActionFrom"]) - 1)]["translate"] else "‚ùå"
    builder.row(InlineKeyboardButton(text=selected + " –ü–µ—Ä–µ–≤–æ–¥ ->", callback_data="AddFilter_translate"),
                InlineKeyboardButton(text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫" if data["filters"][(len(data["chooseActionFrom"]) - 1)][
                                                                 "translateLang"] == "" else f'–Ø–∑—ã–∫ ({data["filters"][(len(data["chooseActionFrom"]) - 1)]["translateLang"]})',
                                     callback_data="set_translateLang"))

    builder.row(InlineKeyboardButton(text="–¢–µ–≥", callback_data=f"set_tag"),InlineKeyboardButton(text="–ú–µ–¥–∏–∞-—Ñ–∏–ª—å—Ç—Ä—ã", callback_data=f"set_filters"))
    builder.row(InlineKeyboardButton(text="–°–ª–æ–≤–∞-–∫–ª—é—á.", callback_data=f"set_goodKeys"),InlineKeyboardButton(text="–°–ª–æ–≤–∞-–∏—Å–∫–ª—é—á.", callback_data=f"set_badKeys"))


    if not int(data["action"]) == 3:
        builder.row(InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
                                         callback_data="ActionAccount_" + data["action"] + "_" + data["phone"]))
    builder.row(InlineKeyboardButton(text="üí®–ù–∞—á–∞—Ç—å", callback_data="start"),
                InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data=f"Chaccount_{data['phone']}"))
    try:
        await callback.message.edit_text("–§–∏–ª—å—Ç—Ä—ã", reply_markup=builder.as_markup())
    except Exception as e:
        await callback.answer("–§–∏–ª—å—Ç—Ä—ã", reply_markup=builder.as_markup())


@dp.callback_query(F.data.split("_")[0] == "set")
async def acc7(callback: types.callback_query, state: FSMContext):


    data = await state.get_data()
    if not "filters" in data and not "action" in data:
        await acc6(callback)
        return
    await state.update_data(condition=callback.data.split("_")[1])
    await state.set_state(Grab.waitFilter)

    match callback.data.split("_")[1]:
        case "tag":

            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ. –û–Ω –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞.")
        case "filters":
            await callback.message.edit_text("""–í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ\n
0 - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)  –í–ù–ò–ú–ê–ù–ò–ï: <i><u>–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤;</u></i>
<b>1 - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è  –í–ù–ò–ú–ê–ù–ò–ï: <u><i>–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤;</i></u></b>\n
–§–ò–õ–¨–¢–†–´ –ù–ò–ñ–ï –ú–û–ñ–ù–û –°–û–í–ú–ï–©–ê–¢–¨\n
<b>2 - —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ;</b>
3 - —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∏–¥–µ–æ;
<b>4 - —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º;</b>
5 - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è;
<b>6 - —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–∞–∫—É—é –ª–∏–±–æ —Å—Å—ã–ª–∫—É;</b>
7 - –í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è;
<b>8 - –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è;</b>""")
        case "translateLang":
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —è–∑—ã–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 639-1 –Ω–∞–ø—Ä–∏–º–µ—Ä (en, ru, fr) –¥–ª—è  –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ.")
        case "goodKeys":
            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –°–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è")
        case "badKeys":
            await callback.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –°–æ–æ–±—â–µ–Ω–∏—è —Å —ç—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –±—É–¥—É—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")


@dp.message(Grab.waitFilter)
async def acc8(message: types.Message, state: FSMContext):

    data = await state.get_data()
    if not "filters" in data and not "action" in data:
        await message.answer(
            "–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ, –≤–æ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞–π—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–∏–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.")
        return
    filter = data["filters"]
    filter[len(data["chooseActionFrom"]) - 1][data["condition"]] = message.text
    await state.update_data(filters=filter)
    await acc1(message, state)


@dp.callback_query(F.data.split("_")[0] == "start")
async def start(callback: types.CallbackQuery, state: FSMContext):


    data = await state.get_data()
    if not "filters" in data and not "action" in data:
        await acc6(callback)
        return
    if not "filters" in data:
        await state.update_data(filters=[])
    data = await state.get_data()
    chats = []
    for ig in data["chats"]:
        chats.append({
            "title": ig.title,
            "id": ig.id
        })

    db.start_accounts(time.time(), json.dumps(chats), "ACTIVE", json.dumps(data["chooseActionFrom"]), json.dumps(data["chooseActionTo"]), json.dumps(data["filters"]), data["action"], data["phone"])

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô–ù–∞–∑–∞–¥", callback_data=f"Chaccount_{data['phone']}"))
    if int(data["action"]) in [1, 3]:
        await callback.message.edit_text(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å <u>–ª–æ–≥–∏</u> –≤—ã –º–æ–∂–µ—Ç–µ –≤ –º–µ–Ω—é –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=builder.as_markup())
    if int(data["action"]) == 2:
        await callback.message.edit_text(
            "–ü—Ä–æ—Ü–µ—Å—Å —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ –ø—É—Ç–∏ \"–õ–æ–≥–∏ -> –ü–∞—Ä—Å–∏–Ω–≥\"",

            reply_markup=builder.as_markup())
    if int(data["action"]) == 4:
        await callback.message.delete()
    aa = data["phone"]
    p = Process(target=startGrab, args=(aa,), name=str(data['phone']))
    p.start()


# Auth new account-------------------------------------------------------------------------------------------------

@dp.callback_query(F.data.split("_")[0] == "accountAdd")
async def accs(callback: types.CallbackQuery, state: FSMContext):


    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä (+1234567890): \n<tg-spoiler>–¢–∞–∫-–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–º —Ñ–∞–π–ª <i><b>.session</b></i> (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ <u><b>telethon</b></u>) –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ 1 - –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ QR-code.</tg-spoiler>", reply_markup=start_add_account_keyboard())
    await state.set_state(Auth.enter_phone)
    await state.update_data(mid=callback.message.message_id)


@dp.message(Auth.enter_phone, F.document)
async def enter_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()

    if message.document.file_name.split(".")[-1] != "session":
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["mid"],
                                    text="–§–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º \"*.session\"",
                                    reply_markup=start_add_account_keyboard())
        return

    await bot.download(
        message.document,
        destination=f"{pathdir}/{message.document.file_name}"
    )
    client = TelegramClient(message.document.file_name, api_id, api_hash)
    await client.connect()
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    if not await client.is_user_authorized():
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["mid"],
                                    text="–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞",
                                    reply_markup=start_add_account_keyboard())
        await client.log_out()
        return
    me = await client.get_me()
    await client.disconnect()


    dm = 'GRBS ' + str(random.randint(0, 20)) + "." + str(random.randint(0, 20)) + "." + str(random.randint(0, 20))
    sv = 'telegram ' + str(random.randint(0, 20)) + "." + str(random.randint(0, 20)) + "." + str(
        random.randint(0, 20))
    av = '' + str(random.randint(0, 20)) + "." + str(random.randint(0, 20)) + "." + str(random.randint(0, 100))

    db.add_to_db_account(message.document.file_name.split(".")[0], message.from_user.id, me.username, me.first_name, dm, sv, av)
    await acc6(message, data["mid"])


@dp.message(Auth.enter_phone, F.text != "1")
async def enter_phone(message: types.Message, state: FSMContext):
    phone = message.text
    data = await state.get_data()
    number = phonenumbers.parse(phone)

    if phonenumbers.is_valid_number(number):
        country_code = phonenumbers.region_code_for_country_code(number.country_code)
        fl = flag.flag(country_code)
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["mid"], text=f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä ({fl}<i><b>{phone}</b></i>), –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ: ",
                             reply_markup=start_add_account_keyboard())
        dm = 'GRBS ' + str(random.randint(0, 20)) + "." + str(random.randint(0, 20)) + "." + str(random.randint(0, 20))
        sv = 'telegram ' + str(random.randint(0, 20)) + "." + str(random.randint(0, 20)) + "." + str(
            random.randint(0, 20))
        av = '' + str(random.randint(0, 20)) + "." + str(random.randint(0, 20)) + "." + str(random.randint(0, 100))
        await state.update_data(deviceModel=dm)
        await state.update_data(systemVersion=sv)
        await state.update_data(appVersion=av)

        client = TelegramClient(phone, api_id, api_hash, device_model=dm, system_version=sv, app_version=av)
        await client.connect()
        try:
            await client.send_code_request(phone)
        except Exception as e:
            await client.connect()
            await client.send_code_request(phone)
        await state.update_data(client=client)
        await state.update_data(phone=phone)
        await state.set_state(Auth.enter_code)
    else:
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["mid"], text="–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.", reply_markup=start_add_account_keyboard())
        await state.set_state(Auth.enter_phone)


@dp.message(Auth.enter_phone, F.text == "1")
async def enter_phone(message: types.Message, state: FSMContext):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –≤–µ—Ä—Å–∏–π
    dm = f'GRBS {random.randint(0, 20)}.{random.randint(0, 20)}.{random.randint(0, 20)}'
    sv = f'telegram {random.randint(0, 20)}.{random.randint(0, 20)}.{random.randint(0, 20)}'
    av = f'{random.randint(0, 20)}.{random.randint(0, 20)}.{random.randint(0, 100)}'

    await state.update_data(deviceModel=dm, systemVersion=sv, appVersion=av)

    if os.path.exists("old_session_file"):
        os.remove("sessionQR.session")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
    client = TelegramClient("sessionQR", api_id, api_hash,
                            device_model=dm, system_version=sv, app_version=av)
    await client.connect()

    qr_login = await client.qr_login()
    await message.delete()

    state_data = await state.get_data()
    await bot.delete_message(message_id=state_data.get("mid"), chat_id=message.chat.id)

    # –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ QR-–∫–æ–¥
    authorized = await wait_for_authorization(client, qr_login, bot, message, state)

    if authorized:
        user = await client.get_me()
        phone_number = user.phone

        # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        await client.disconnect()
        old_session_file = "sessionQR.session"
        new_session_file = f"+{phone_number}.session"

        if os.path.exists(old_session_file):
            try:
                os.rename(old_session_file, new_session_file)
            except PermissionError:
                time.sleep(2)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ñ–∞–π–ª–∞
        state_data = await state.get_data()
        await bot.delete_message(chat_id=message.chat.id, message_id=state_data.get("messs"))
        mid = await bot.send_message(
            chat_id=message.from_user.id,
            text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞.",
        )
        await state.clear()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î (–ø—Ä–∏–º–µ—Ä)
        db.add_to_db_account(
            "+" + str(phone_number), message.from_user.id,
            user.username, user.first_name, dm, sv, av
        )
        await acc6(message, mid.message_id)
    else:
        await client.disconnect()
        await bot.send_message(
            chat_id=message.chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ QR-–∫–æ–¥.",
            reply_markup=start_add_account_keyboard(),
        )
        await state.set_state(Auth.enter_phone)

async def wait_for_authorization(client, qr_login, bot, message, state):
    """–û–∂–∏–¥–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ QR-–∫–æ–¥."""
    start_time = time.time()
    authorized = False

    while not authorized:
        if time.time() - start_time > 60:
            break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥

        qr_code_file = generate_qr_code(qr_login.url)
        state_data = await state.get_data()

        if state_data.get("messs", 0):
            if state_data.get("qr_url") != qr_login.url:
                media = InputMediaPhoto(media=qr_code_file, caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.")
                await bot.edit_message_media(
                    chat_id=message.chat.id,
                    message_id=state_data.get("messs"),
                    media=media,
                )
                await state.update_data(qr_url=qr_login.url)
        else:
            sent_message = await bot.send_photo(
                chat_id=message.chat.id,
                photo=qr_code_file,
                caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥."
            )
            await state.update_data(messs=sent_message.message_id, qr_url=qr_login.url)

        try:
            authorized = await qr_login.wait()
        except errors.SessionPasswordNeededError:
            return False  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞ –ø–∞—Ä–æ–ª—å
        except Exception:
            await qr_login.recreate()  # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    return authorized



@dp.message(Auth.enter_code)
async def enter_code(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    code = re.findall(r'\d+', message.text)
    code = ''.join(code)
    if is_digits(code):
        client = user_data["client"]
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await client.sign_in(phone=user_data["phone"], code=code)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=user_data["mid"], text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
            me = await client.get_me()
            await client.disconnect()
            await state.clear()
            db.add_to_db_account(user_data["phone"], message.from_user.id, me.username, me.first_name,
                              user_data["deviceModel"], user_data["systemVersion"], user_data["appVersion"])
            await acc6(message, user_data["mid"])
        except errors.SessionPasswordNeededError:
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=user_data["mid"], text="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ: ")
            await state.update_data(code=code)
            await state.update_data(client=client)
            await state.set_state(Auth.enter_password)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: {e}")
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=user_data["mid"], text="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: ")
            await state.update_data(client=client)
            await state.set_state(Auth.enter_code)
    else:
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=user_data["mid"], text="–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.", reply_markup=start_add_account_keyboard())
        await state.set_state(Auth.enter_code)


@dp.message(Auth.enter_password)
async def enter_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    password = message.text
    client = user_data["client"]
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    try:
        await client.sign_in(password=password)
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=user_data["mid"], text="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞")
        me = await client.get_me()
        await client.disconnect()
        await state.clear()
        db.add_to_db_account(user_data["phone"], message.from_user.id, me.username, me.first_name,
                          user_data["deviceModel"], user_data["systemVersion"], user_data["appVersion"])
        await acc6(message, user_data["mid"])
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–∫–∫–∞—É–Ω—Ç: {e}")
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=user_data["mid"], text="–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ: ")
        await state.update_data(client=client)
        await state.set_state(Auth.enter_password)


def format_time_difference(time_difference):
    seconds = int(round(time_difference))

    if seconds < 60:
        return f"{seconds}—Å"
    elif seconds < 3600:
        minutes = seconds // 60
        seconds %= 60
        return f"{minutes}–º {seconds}—Å"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds %= 60
        return f"{hours}—á {minutes}–º {seconds}—Å"
    elif seconds < 2592000:  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ –º–µ—Å—è—Ü–µ
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        minutes = (seconds % 3600) // 60
        seconds %= 60
        return f"{days}–¥ {hours}—á {minutes}–º {seconds}—Å"
    else:
        months = seconds // 2592000
        days = (seconds % 2592000) // 86400
        hours = (seconds % 86400) // 3600
        minutes = (seconds % 3600) // 60
        seconds %= 60
        return f"{months}–º {days}–¥ {hours}—á {minutes}–º {seconds}—Å"


async def checkSubs():
    while True:
        device_id = get_device_id()
        if not check_license(device_id):
            await bot.send_message(chat_id=os.getenv("ME_ID"), text="–†–∞–±–æ—Ç–∞ —Å–æ—Ñ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ª–∏—Ü–µ–Ω–∑–∏—è –∏—Å—Ç–µ–∫–ª–∞")
            for p in multiprocessing.active_children():
                p.terminate()
            sys.exit(0)
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

async def checkU():
    while True:
        if os.access("./update.rar", os.F_OK):
            return
        ch = checkUpdate(Client_verison)
        if ch:
            try:
                await bot.send_message(chat_id=os.getenv("ME_ID"), text="‚ÄºÔ∏è<b><u>–°–∫–∞—á–∞–Ω–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</u></b>‚ÄºÔ∏è\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ –∞—Ä—Ö–∏–≤–∞ \"<code>update.rar</code>\" –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É —Å <b>–∑–∞–º–µ–Ω–æ–π</b>.\n<tg-spoiler>–ü–æ—Å–ª–µ —á–µ–≥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —É–¥–∞–ª–∏—Ç–µ –∞—Ä—Ö–∏–≤, –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π</tg-spoiler>")
                return
            except Exception as e:
                logger.error(e)
                pass
        else:
            await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

async def main():

    asyncio.create_task(checkSubs())
    asyncio.create_task(checkU())
    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        device_id = get_device_id()
        if check_license(device_id):
            asyncio.run(main())
    except KeyboardInterrupt as e:
        print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


